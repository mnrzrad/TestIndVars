}
}
matrix <- sigma2 * covariance_matrix
if (is.positive.definite(matrix)) {
message <- "The covariance matrix is positive definite."
break  # Exit the loop if the matrix is positive definite
} else {
message <- "The covariance matrix is not positive definite."
}
names(matrix) <- "matrix"
names(message) <- "message"
return(c(matrix, message))
}
covMatAR(p = 5)
covMatAR <- function(p, sigma2 = 1, rho) {
if (missing(rho)) {
rho <- stats::runif(1) # If rho is not provided, generate a random value between 0 and 1
}
# Initialize an empty covariance matrix
covariance_matrix <- matrix(0, nrow = p, ncol = p)
# Fill in the covariance matrix based on the AR structure
for (i in 1:p) {
for (j in 1:p) {
covariance_matrix[i, j] <- rho^(abs(i - j))
}
}
matrix <- sigma2 * covariance_matrix
if (is.positive.definite(matrix)) {
message <- "The covariance matrix is positive definite."
} else {
message <- "The covariance matrix is not positive definite."
}
names(matrix) <- "matrix"
names(message) <- "message"
return(c(matrix, message))
}
covMatAR(p = 5)
covMatAR <- function(p, sigma2 = 1, rho) {
if (missing(rho)) {
rho <- stats::runif(1) # If rho is not provided, generate a random value between 0 and 1
}
# Initialize an empty covariance matrix
covariance_matrix <- matrix(0, nrow = p, ncol = p)
# Fill in the covariance matrix based on the AR structure
for (i in 1:p) {
for (j in 1:p) {
covariance_matrix[i, j] <- rho^(abs(i - j))
}
}
matrix <- sigma2 * covariance_matrix
if (is.positive.definite(matrix)) {
message <- "The covariance matrix is positive definite."
} else {
message <- "The covariance matrix is not positive definite."
}
print(matrix)
cat("\n")
cat(message, "\n")
}
covMatAR(p = 5)
#' covMatCS(p = 5, rho = 0.9)
#'
#' # generate a covariance matrix for \eqn{p = 5},  \eqn{\sigma^2 = 5}, and \eqn{\rho = 0.9}.
#' covMatCS(p = 5, sigma2 = 5, rho = 0.9)
#'
#' # generate  covariance matrix for \eqn{p = 5},  and no value is considered for \eqn{\rho}
#' covMatCS(p = 5)
#'
#' @importFrom stats runif
#' @export
covMatCS <- function(p, sigma2 = 1, rho = NULL) {
if (is.null(rho)) {
rho <- stats::runif(1) # If rho is not provided, generate a random value between 0 and 1
}
# Equivariance-equicorrelation covariance matrix
matrix <- sigma2 * (rho * matrix(1, nrow = p, ncol = p) + (1 - rho) * diag(p))
if (is.positive.definite(matrix)) {
message <- "The covariance matrix is positive definite."
} else {
message <- "The covariance matrix is not positive definite."
}
print(matrix)
cat("\n")
cat(message, "\n")
}
covMatCS(p = 5)
covMatC <- function(p, sigma2 = 1, rho = NULL) {
if (is.null(rho)) {
rho <- stats::runif(1) # If rho is not provided, generate a random value between 0 and 1
}
# Create an empty matrix
matrix <- matrix(0, nrow = p, ncol = p)
# Populate the covariance matrix
for (i in 1:p) {
for (j in 1:p) {
if (i == j) {
matrix[i, j] <- sigma2
} else {
distance <- min(abs(i - j), p - abs(i - j))
matrix[i, j] <- sigma2 * exp(-rho * distance)
}
}
}
if (is.positive.definite(matrix)) {
message <- "The covariance matrix is positive definite."
} else {
message <- "The covariance matrix is not positive definite."
}
print(matrix)
cat("\n")
cat(message, "\n")
}
covMatC(p = 5)
importFrom(stats, runif)
library(test)
n <- 199
NN <- n + 1
p <- 15
Cov <- gamma * matrix(1, nrow = p, ncol = p) + (1 - gamma) * diag(p)
gamma = 0.2
Cov <- gamma * matrix(1, nrow = p, ncol = p) + (1 - gamma) * diag(p)
Data <- mvrnorm(NN, mu, Cov)
Data <- MASS::mvrnorm(NN, mu, Cov)
mu <- rep(0, p)
Data <- MASS::mvrnorm(NN, mu, Cov)
vecS <- (NN - 1) * cov(Data)
LR <- det(vecS) / prod(diag(vecS))
sig <- diag(cov(Data))
datan1 <- colSums(Data)
datan1
likelihood_ratio_test <- function(X) {
n <- nrow(X)
p <- ncol(X)
# Maximum likelihood estimator of covariance matrix
A <- (n - 1) * cov(X)
# Calculate likelihood ratio test statistic
LR <- (det(A) / prod(diag(A)))^(n/2)
# Degrees of freedom
df <- p * (p + 1) / 2
# Critical value from chi-square distribution
critical_value <- qchisq(0.95, df)
# Calculate p-value
p_value <- 1 - pchisq(LR, df)
# Create a table
results <- data.frame(Test_Statistic = LR,
Degrees_of_Freedom = df,
Critical_Value = critical_value,
P_Value = p_value)
return(results)
}
# Example usage
set.seed(123)  # for reproducibility
X <- matrix(rnorm(100), ncol = 5)  # Example data
# Perform likelihood ratio test
likelihood_ratio_test(X)
likelihood_ratio_test <- function(X, alpha = NULL) {
n <- nrow(X)
p <- ncol(X)
# Maximum likelihood estimator of covariance matrix
A <- (n - 1) * cov(X)
# Calculate likelihood ratio test statistic
LR <- (det(A) / prod(diag(A)))^(n/2)
# Degrees of freedom
df <- p * (p + 1) / 2
# Define significance levels (alphas)
alphas <- c(0.01, 0.05, 0.01, 0.05, 0.1, 0.2, 0.5)
# Add user-specified alpha if provided
if (!is.null(alpha)) {
alphas <- c(alphas, alpha)
alphas <- unique(alphas)
}
# Calculate critical values for different alphas
critical_values <- qchisq(1 - alphas, df)
# Calculate p-values
p_values <- 1 - pchisq(LR, df)
# Determine if LR is greater than critical value for each alpha
test_results <- ifelse(LR > critical_values, "Reject H0", "Fail to Reject H0")
# Create a data frame to store results
results <- data.frame(Significance_Level = alphas,
Test_Statistic = LR,
Degrees_of_Freedom = df,
Critical_Value = critical_values,
P_Value = p_values,
Test_Result = test_results)
return(results)
}
# Example usage
set.seed(123)  # for reproducibility
X <- matrix(rnorm(100), ncol = 5)  # Example data
# Perform likelihood ratio test
likelihood_ratio_test(X, alpha = 0.05)
likelihood_ratio_test <- function(X, alpha = NULL) {
n <- nrow(X)
p <- ncol(X)
# Maximum likelihood estimator of covariance matrix
A <- (n - 1) * cov(X)
# Calculate likelihood ratio test statistic
LR <- (det(A) / prod(diag(A)))^(n/2)
# Degrees of freedom
df <- p * (p + 1) / 2
# Define significance levels (alphas)
alphas <- c(0.01, 0.05, 0.01, 0.05, 0.1, 0.2, 0.5)
# If alpha is provided, use only that alpha
if (!is.null(alpha)) {
alphas <- alpha
}
# Calculate critical values for specified alpha(s)
critical_values <- qchisq(1 - alphas, df)
# Calculate p-value
p_value <- 1 - pchisq(LR, df)
# Determine if LR is greater than critical value for each alpha
test_results <- ifelse(LR > critical_values, "Reject H0", "Fail to Reject H0")
# Create a data frame to store results
results <- data.frame(Significance_Level = alphas,
Test_Statistic = LR,
Degrees_of_Freedom = df,
Critical_Value = critical_values,
P_Value = p_value,
Test_Result = test_results)
return(results)
}
# Example usage
set.seed(123)  # for reproducibility
X <- matrix(rnorm(100), ncol = 5)  # Example data
# Perform likelihood ratio test for specific alpha
likelihood_ratio_test(X, alpha = 0.05)
likelihood_ratio_test <- function(X, alpha = NULL) {
n <- nrow(X)
p <- ncol(X)
# Maximum likelihood estimator of covariance matrix
A <- (n - 1) * cov(X)
# Calculate likelihood ratio test statistic
LR <- (det(A) / prod(diag(A)))^(n/2)
# Degrees of freedom
df <- p * (p + 1) / 2
# If alpha is provided, calculate critical value for that alpha
if (!is.null(alpha)) {
critical_value <- qchisq(1 - alpha, df)
test_result <- ifelse(LR > critical_value, "Reject H0", "Fail to Reject H0")
p_value <- pchisq(LR, df, lower.tail = FALSE)
} else {
critical_value <- NA
test_result <- NA
p_value <- NA
}
# Create a data frame to store results
results <- data.frame(Test_Statistic = LR,
Degrees_of_Freedom = df,
Critical_Value = critical_value,
P_Value = p_value,
Test_Result = test_result)
return(results)
}
# Example usage
set.seed(123)  # for reproducibility
X <- matrix(rnorm(100), ncol = 5)  # Example data
# Perform likelihood ratio test
likelihood_ratio_test(X, alpha = 0.05)
qchisq(1 - alpha, df)
alpha = 0.05
X <- matrix(rnorm(100), ncol = 5)  # Example data
n <- nrow(X)
p <- ncol(X)
# Maximum likelihood estimator of covariance matrix
A <- (n - 1) * cov(X)
# Calculate likelihood ratio test statistic
LR <- (det(A) / prod(diag(A)))^(n/2)
# Degrees of freedom
df <- p * (p + 1) / 2
critical_value <- qchisq(1 - alpha, df)
critical_value
LR
(det(A) / prod(diag(A)))
independent_test <- function(X, covMat = NULL, alpha = c(0.01, 0.05, 0.1)) {
n <- nrow(X)
p <- ncol(X)
# Maximum likelihood estimator of covariance matrix
A <- (n - 1) * cov(X)
sig <- diag(cov(X))
W <- colSums(X)
if (is.null(covMat)) {
# Sigma unknown
test_statistic <- (n - 1) * var(W) / sum(sig)
df <- n - 1
} else {
# Sigma known
test_statistic <- (n - 1) * var(W) / sum(diag(covMat))
df <- n - 1
}
# Calculate critical values for the chi-square distribution
critical_values <- qchisq(1 - alpha/2, df)  # Two-tailed
# Perform hypothesis test
test_results <- test_statistic > critical_values[1] | test_statistic < critical_values[2]
# Calculate p-values for both tails
p_values_upper <- pchisq(test_statistic, df = df, lower.tail = FALSE)
p_values_lower <- pchisq(test_statistic, df = df, lower.tail = TRUE)
# Calculate final p-value using the minimum of probabilities
p_values <- 2 * pmin(p_values_upper, p_values_lower)
# Create a data frame to store results
results <- data.frame(Test_Statistic = test_statistic,
Degrees_of_Freedom = df,
Critical_Value_Upper = critical_values[1],
Critical_Value_Lower = critical_values[2],
P_Value = p_values,
Test_Result = test_results)
return(results)
}
# Example usage
set.seed(123)  # for reproducibility
X <- matrix(rnorm(100), ncol = 5)  # Example data
# Perform independent test with unknown sigma
independent_test(X)
# Perform independent test with known covariance matrix
covMat <- cov(X)  # Example covariance matrix
independent_test(X, covMat = covMat)
independent_test <- function(X, covMat = NULL, alpha = c(0.01, 0.05, 0.1)) {
n <- nrow(X)
p <- ncol(X)
# Maximum likelihood estimator of covariance matrix
A <- (n - 1) * cov(X)
sig <- diag(cov(X))
W <- colSums(X)
if (is.null(covMat)) {
# Sigma unknown
test_statistic <- (n - 1) * var(W) / sum(sig)
df <- n - 1
} else {
# Sigma known
test_statistic <- (n - 1) * var(W) / sum(diag(covMat))
df <- n - 1
}
# Calculate p-values for both tails
p_values_upper <- pchisq(test_statistic, df = df, lower.tail = FALSE)
p_values_lower <- pchisq(test_statistic, df = df, lower.tail = TRUE)
# Calculate final p-value using the minimum of probabilities
p_values <- 2 * pmin(p_values_upper, p_values_lower)
# Create a data frame to store results
results <- data.frame(Alpha = alpha,
P_Value = p_values,
Test_Result = ifelse(p_values <= alpha, "Reject H0", "Fail to Reject H0"))
return(results)
}
# Example usage
set.seed(123)  # for reproducibility
X <- matrix(rnorm(100), ncol = 5)  # Example data
# Perform independent test with unknown sigma
independent_test(X)
# Perform independent test with known covariance matrix
covMat <- cov(X)  # Example covariance matrix
independent_test(X, covMat = covMa
independent_test <- function(X, covMat = NULL, alpha = NULL) {
independent_test <- function(X, covMat = NULL, alpha = NULL) {
n <- nrow(X)
p <- ncol(X)
# Maximum likelihood estimator of covariance matrix
A <- (n - 1) * cov(X)
sig <- diag(cov(X))
W <- colSums(X)
if (is.null(covMat)) {
# Sigma unknown
test_statistic <- (n - 1) * var(W) / sum(sig)
df <- n - 1
} else {
# Sigma known
test_statistic <- (n - 1) * var(W) / sum(diag(covMat))
df <- n - 1
}
# Define significance levels (alphas)
alphas <- c(0.01, 0.05, 0.01, 0.05, 0.1, 0.2, 0.5)
# Calculate p-values for both tails
p_values_upper <- pchisq(test_statistic, df = df, lower.tail = FALSE)
p_values_lower <- pchisq(test_statistic, df = df, lower.tail = TRUE)
# Calculate final p-value using the minimum of probabilities
p_value <- 2 * pmin(p_values_upper, p_values_lower)
# Create a data frame to store results
results <- data.frame(Test_Statistic = test_statistic,
Alpha = alphas,
P_Value = p_value,
Test_Result = ifelse(p_value <= alphas, "Reject H0", "Fail to Reject H0"))
if (!is.null(alpha)) {
result <- data.frame(Test_Statistic = test_statistic,
Alpha = alpha,
P_Value = p_value,
Test_Result = ifelse(p_value <= alphas, "Reject H0", "Fail to Reject H0"))
return(result)
}
return(results)
}
# Example usage
set.seed(123)  # for reproducibility
X <- matrix(rnorm(100), ncol = 5)  # Example data
# Perform independent test without specifying alpha
independent_test(X)
independent_test <- function(X, covMat = NULL, alpha = NULL) {
n <- nrow(X)
p <- ncol(X)
# Maximum likelihood estimator of covariance matrix
A <- (n - 1) * cov(X)
sig <- diag(cov(X))
W <- colSums(X)
if (is.null(covMat)) {
# Sigma unknown
test_statistic <- (n - 1) * var(W) / sum(sig)
df <- n - 1
} else {
# Sigma known
test_statistic <- (n - 1) * var(W) / sum(diag(covMat))
df <- n - 1
}
# Define significance levels (alphas)
alphas <- c(0.01, 0.05, 0.01, 0.05, 0.1, 0.2, 0.5)
# Calculate p-values for both tails
p_values_upper <- pchisq(test_statistic, df = df, lower.tail = FALSE)
p_values_lower <- pchisq(test_statistic, df = df, lower.tail = TRUE)
# Calculate final p-value using the minimum of probabilities
p_value <- 2 * pmin(p_values_upper, p_values_lower)
# Create a data frame to store results
results <- data.frame(Test_Statistic = test_statistic,
Degrees_of_Freedom = df,
Alpha = alphas,
P_Value = p_value,
Test_Result = ifelse(p_value <= alphas, "Reject H0", "Fail to Reject H0"))
if (!is.null(alpha)) {
result <- data.frame(Test_Statistic = test_statistic,
Degrees_of_Freedom = df,
Alpha = alpha,
P_Value = p_value,
Test_Result = ifelse(p_value <= alphas, "Reject H0", "Fail to Reject H0"))
return(result)
}
return(results)
}
# Example usage
set.seed(123)  # for reproducibility
X <- matrix(rnorm(100), ncol = 5)  # Example data
# Perform independent test without specifying alpha
independent_test(X)
# Perform independent test with alpha = 0.05
independent_test(X, alpha = 0.05)
covMat <- covMatCS(5)
covMat
covMatC <- function(p, sigma2 = 1, rho = NULL) {
if (is.null(rho)) {
rho <- stats::runif(1) # If rho is not provided, generate a random value between 0 and 1
}
# Create an empty matrix
matrix <- matrix(0, nrow = p, ncol = p)
# Populate the covariance matrix
for (i in 1:p) {
for (j in 1:p) {
if (i == j) {
matrix[i, j] <- sigma2
} else {
distance <- min(abs(i - j), p - abs(i - j))
matrix[i, j] <- sigma2 * exp(-rho * distance)
}
}
}
if (matrixcalc::is.positive.definite(matrix)) {
message <- "The covariance matrix is positive definite."
} else {
message <- "The covariance matrix is not positive definite."
}
cat(message, "\n")
return(matrix)
}
covMatC(p = 5)
covMatC <- function(p, sigma2 = 1, rho = NULL) {
if (is.null(rho)) {
rho <- stats::runif(1) # If rho is not provided, generate a random value between 0 and 1
}
# Create an empty matrix
matrix <- matrix(0, nrow = p, ncol = p)
# Populate the covariance matrix
for (i in 1:p) {
for (j in 1:p) {
if (i == j) {
matrix[i, j] <- sigma2
} else {
distance <- min(abs(i - j), p - abs(i - j))
matrix[i, j] <- sigma2 * exp(-rho * distance)
}
}
}
if (matrixcalc::is.positive.definite(matrix)) {
message <- "The covariance matrix is positive definite."
} else {
message <- "The covariance matrix is not positive definite."
}
cat(message, "\n")
cat("\n")
return(matrix)
}
covMatC(5)
mat = covMatC(5)
mat
covMat <- covMatCS(5)
covMat
covMatCS(5)
covMat <- covMatC(5)
covMat
covMat <- covMatC(5)
covMat
X <- mvrnorm(n = 100, mu = rep(0,5), Sigma = covMat)
X <- mvrnorm(n = 100, mu = rep(0,5), Sigma = covMat)
X <- MASS::mvrnorm(n = 100, mu = rep(0,5), Sigma = covMat)
# Perform independent test with alpha = 0.05
independent_test(X, alpha = 0.05)
covMat <- diag(5)
X <- MASS::mvrnorm(n = 100, mu = rep(0,5), Sigma = covMat)
# Perform independent test with alpha = 0.05
independent_test(X, alpha = 0.05)
